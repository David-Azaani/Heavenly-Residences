@page "/hotel-room"
@using Models
@using Business.Repository.IRepository
@using Heaven_Resorts_Server.Helper
@using Heaven_Resorts_Server.Services
@using Heaven_Resorts_Server.Services.IService
@inject IHotelRoomRepository HotelRoomRepository
@inject IJSRuntime JsRuntime
@inject IFileUpload FileUpload
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = Common.SD.Role_Admin)]
<div class="row mt-4">
    <div class="col-8">
        <h4 class="card-title text-info">Hotel Room's</h4>
    </div>
    <div class="col-3 offset-1">
        <NavLink href="hotel-room/create" class="btn btn-info form-control">Add New Room</NavLink>
    </div>
</div>
<div class="row mt-4">
    <div class="col-12">
        <table class="table table-bordered table-hover">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Occupancy</th>
                    <th>Rate</th>
                    <th>Sqft</th>
                    <th>Details</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @if (model.Any())
                {
                    foreach (var room in model)
                    {
                        <tr>
                            <td>@room.Name</td>
                            <td>@room.Occupancy</td>
                            <td>@room.RegularRate</td>
                            <td>@room.SqFt</td>
                            <td>@((MarkupString)room.Details)</td>
                          
                            <td>
                                <NavLink href="@($"/hotel-room/edit/{room.Id}")" class="btn btn-primary">Edit</NavLink>
                                <button class="btn btn-danger" @onclick="() =>HandleDelete(room.Id) ">Delete</button>
                            </td>
                        </tr>
                    }

                }
                else
                {
                    <tr>
                        <td colspan="6">No records found</td>
                    </tr>
                }
            </tbody>

        </table>
    </div>
</div>
<DeleteConfirmation ConfirmationChanged="ConfirmDelete_Click" IsParentComponentProcessing="IsProcessing"></DeleteConfirmation>

@code {

    private IEnumerable<HotelRoomDTO> model { get; set; } = new List<HotelRoomDTO>();
    private int? DeleteRoomId { get; set; } = null;
    private bool IsProcessing { get; set; } = false;
    string x = "";
    protected override async Task OnInitializedAsync()
    {
        model = await HotelRoomRepository.GetAllHotelRooms();
    }

    #region Comment

    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //    await JsRuntime.InvokeVoidAsync("ShowDeleteConfirmationModal");
    //}

    #endregion
    private async Task HandleDelete(int roomId)
    {
        DeleteRoomId = roomId;

        await JsRuntime.InvokeVoidAsync("ShowDeleteConfirmationModal");
    }
    public async Task ConfirmDelete_Click(bool isConfirmed)
    {
        IsProcessing = true;
        if (isConfirmed && DeleteRoomId != null)
        {
            HotelRoomDTO hotelRoom = await HotelRoomRepository.GetHotelRoom(DeleteRoomId.Value);
            foreach (var image in hotelRoom.HotelRoomImages)
            {
                // x = $"{NavigationManager.BaseUri}RoomImages/";
                var imageName = image.RoomImageUrl.Replace($"{NavigationManager.BaseUri}RoomImages/", "");

                FileUpload.DeleteFile(imageName);
            }

            await HotelRoomRepository.DeleteHotelRoom(DeleteRoomId.Value);
            await JsRuntime.ToastrSuccess("Hotel Room Deleted successfully");
            model = await HotelRoomRepository.GetAllHotelRooms();
        }
        await JsRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");
        IsProcessing = false;
    }
}


