@page "/hotel-room/create"
@page "/hotel-room/edit/{id:int}"
@using Models
@using Business.Repository.IRepository
@using Heaven_Resorts_Server.Helper
@using Microsoft.EntityFrameworkCore.Design
@inject IHotelRoomRepository HotelRoomRepository
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime




<div class="row mt-2 mb-5">
    <h3 class="=card-title text-info mb-3 ml-3">@Title Hotel Rooms</h3>
    <div class="col-md-12">
        <div class="card">
            <div class="card-body">
                <EditForm Model="model" OnValidSubmit="HandledHotelRoomUpsert">
                    <DataAnnotationsValidator />
                    @*<ValidationSummary />*@
                    <div class="form-group">
                        <label>Name</label>
                        <InputText @bind-Value="model.Name" class="form-control"></InputText>
                        <ValidationMessage For="()=>model.Name" />
                    </div>
                    <div class="form-group">
                        <label>Occupancy</label>
                        <InputNumber @bind-Value="model.Occupancy" class="form-control"></InputNumber>
                        <ValidationMessage For="()=>model.Occupancy" />
                    </div>
                    <div class="form-group">
                        <label>Rate</label>
                        <InputNumber @bind-Value="model.RegularRate" class="form-control"></InputNumber>
                        <ValidationMessage For="()=>model.RegularRate" />
                    </div>
                    <div class="form-group">
                        <label>Sq ft</label>
                        <InputText @bind-Value="model.SqFt" class="form-control"></InputText>
                    </div>
                    <div class="form-group">
                        <label>Details</label>
                        <InputTextArea @bind-Value="model.Details" class="form-control"></InputTextArea>
                    </div>
                    <div class="form-group">
                        <button class="btn btn-primary">@Title Room</button>
                        <NavLink href="/hotel-room" class="btn btn-secondary">Back to Index</NavLink>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>


@code {

    [Parameter]
    public int? Id { get; set; }


    private HotelRoomDTO model { get; set; } = new HotelRoomDTO();
    private string Title { get; set; } = "Create";

    #region Comment

    //private async Task SuccessAlert()
    //{
    //    await JsRuntime.InvokeVoidAsync("ShowToastr", "success","Done!");
    //}
    //private async Task FailureAlert()
    //{
    //    await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "We've got some Errors!!");

    //}

    #endregion
    protected async override Task OnInitializedAsync()
    {
        if (Id != null)
        {
            //Update
            Title = "Update";
            model = await HotelRoomRepository.GetHotelRoom(Id.Value);

        }
        else
        {
            //Create
            Title = "Cretae";
            model = new HotelRoomDTO();
        }

        //return base.OnInitializedAsync();

    }


    private async Task HandledHotelRoomUpsert()

    {
        try
        {
            var roomDetailsByName = await HotelRoomRepository.IsRoomUniq(model.Name,model.Id);
            if (roomDetailsByName != null)
            {
                //Show Error
                // await FailureAlert(); or better is below

                await JsRuntime.ToastrError("Room Name already exists");
                return;
                ;
            }
            if (model.Id != 0 && Title == "Update")
            {
                //Update
                var updateRoomResult = await HotelRoomRepository.UpdateHotelRoom(model.Id, model);
                await JsRuntime.ToastrSuccess("Hotel Room Updated Successfully!");
            }
            else
            {
                //Create
                var createRoom = await HotelRoomRepository.CreateHotelRoom(model);
                await JsRuntime.ToastrSuccess("Hotel Room Created Successfully!");

            }
        }
        catch (Exception e)
        {
            //Log Exception
            await JsRuntime.ToastrError("Unknown Error is Occurred!");
        }


        //await SuccessAlert();
        //await JsRuntime.ToastrSuccess("Done!");
        NavigationManager.NavigateTo("hotel-room");

    }



}
