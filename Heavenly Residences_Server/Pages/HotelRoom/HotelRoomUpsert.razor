@page "/hotel-room/create"
@page "/hotel-room/edit/{id:int}"
@using Models
@using Business.Repository.IRepository
@using Heavenly_Residences_Server.Helper
@using Microsoft.EntityFrameworkCore.Design
@using System.IO
@using Business.Repository
@using Common
@using Heavenly_Residences_Server.Services.IService
@using FileInfo = System.IO.FileInfo
@inject IHotelRoomRepository HotelRoomRepository
@inject IHotelImagesRepository ImagesRepository
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject IFileUpload FileUpload
@attribute [Authorize(Roles = Common.SD.Role_Admin)]



<div class="row mt-2 mb-5">
    <h3 class="=card-title text-info mb-3 ml-3">@Title Hotel Rooms</h3>
    <div class="col-md-12">
        <div class="card">
            <div class="card-body">
                <EditForm Model="model" OnValidSubmit="HandledHotelRoomUpsert">
                    <DataAnnotationsValidator />
                    @*<ValidationSummary />*@
                    <div class="form-group">
                        <label>Name</label>
                        <InputText @bind-Value="model.Name" class="form-control"></InputText>
                        <ValidationMessage For="()=>model.Name" />
                    </div>
                    <div class="form-group">
                        <label>Occupancy</label>
                        <InputNumber @bind-Value="model.Occupancy" class="form-control"></InputNumber>
                        <ValidationMessage For="()=>model.Occupancy" />
                    </div>
                    <div class="form-group">
                        <label>Rate</label>
                        <InputNumber @bind-Value="model.RegularRate" class="form-control"></InputNumber>
                        <ValidationMessage For="()=>model.RegularRate" />
                    </div>
                    <div class="form-group">
                        <label>Sq ft</label>
                        <InputText @bind-Value="model.SqFt" class="form-control"></InputText>
                    </div>
                    <div class="form-group" style="height: 250px;">
                        <label>Details</label>
                        @*<InputTextArea @bind-Value="model.Details" class="form-control"></InputTextArea>*@
                        <BlazoredTextEditor @ref="@QuillHtml" Placeholder="Please enter room details">
                            <ToolbarContent>
                                <select class="ql-header">
                                    <option selected=""></option>
                                    <option value="1"></option>
                                    <option value="2"></option>
                                    <option value="3"></option>
                                    <option value="4"></option>
                                    <option value="5"></option>
                                </select>
                                <span class="ql-formats">
                                    <button class="ql-bold"></button>
                                    <button class="ql-italic"></button>
                                    <button class="ql-underline"></button>
                                    <button class="ql-strike"></button>
                                </span>
                                <span class="ql-formats">
                                    <select class="ql-color"></select>
                                    <select class="ql-background"></select>
                                </span>
                                <span class="ql-formats">
                                    <button class="ql-list" value="ordered"></button>
                                    <button class="ql-list" value="bullet"></button>
                                </span>
                                <span class="ql-formats">
                                    <button class="ql-link"></button>
                                </span>
                            </ToolbarContent>
                            <EditorContent>

                            </EditorContent>
                        </BlazoredTextEditor>
                    </div>
                    <div class="form-group" style="padding-top: 70px;">
                        <InputFile OnChange="HandleImageUpload" accept="image/x-png,image/jpeg" title="Upload jpeg or png image" multiple></InputFile>
                        <div class="row">
                            @if (IsImageUploadProcessStarted)
                            {
                                <div class="col-md-12">
                                    <span><i class="fa fa-spin fa-spinner"></i> <p class="text-info oi-bold">Please wait.. Images are uploading...</p></span>
                                </div>
                            }
                            @if (model.ImageUrls != null && model.ImageUrls.Count > 0)
                            {
                                int serial = 1;
                                foreach (var roomImage in model.ImageUrls)
                                {
                                    <div class="col-md-2 mt-3">
                                        <div class="room-image" style="background: url('@roomImage') 50% 50%;">
                                            <span class="room-image-title">@serial</span>
                                        </div>

                                        <button type="button" @onclick="() => DeletePhoto(roomImage)" class="btn btn-outline-danger btn-block mt-4">
                                            Delete
                                        </button>
                                    </div>
                                    serial++;
                                }
                            }
                        </div>
                    </div>
                    <div class="form-group">
                        <button class="btn btn-primary">@Title Room</button>
                        <NavLink href="/hotel-room" class="btn btn-secondary">Back to Index</NavLink>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>


@code {

    [Parameter]
    public int? Id { get; set; }


    private HotelRoomDTO model { get; set; } = new HotelRoomDTO();
    private string Title { get; set; } = "Create";
    private HotelRoomImageDTO RoomImage { get; set; } = new HotelRoomImageDTO();
    private List<string> DeletedImageNames { get; set; } = new List<string>();
    private bool IsImageUploadProcessStarted { get; set; } = false;
    private BlazoredTextEditor QuillHtml { get; set; } = new BlazoredTextEditor();

    #region Comment

    //private async Task SuccessAlert()
    //{
    //    await JsRuntime.InvokeVoidAsync("ShowToastr", "success","Done!");
    //}
    //private async Task FailureAlert()
    //{
    //    await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "We've got some Errors!!");

    //}

    #endregion
    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; }
    protected async override Task OnInitializedAsync()
    {
        var authenticationState = await AuthenticationState;
        if (!authenticationState.User.IsInRole(Common.SD.Role_Admin))
        {
            var uri = new Uri(NavigationManager.Uri);
            NavigationManager.NavigateTo($"/identity/account/login?returnUrl={uri.LocalPath}");
        }
        if (Id != null)
        {
            //Update
            Title = "Update";
            model = await HotelRoomRepository.GetHotelRoom(Id.Value);
            if (model?.HotelRoomImages != null)
            {
                model.ImageUrls = model.HotelRoomImages.Select(a => a.RoomImageUrl).ToList();
            }

        }
        else
        {
            //Create
            Title = "Cretae";
            model = new HotelRoomDTO();
        }


        //return base.OnInitializedAsync();

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //SetHTML();
        if (!firstRender)
            return;
        bool loading = true;
        while (loading)
        {
            try
            {
                if (!string.IsNullOrEmpty(model.Details))
                {
                    await this.QuillHtml.LoadHTMLContent(model.Details);
                }
                loading = false;
            }
            catch
            {
                await Task.Delay(10);
                loading = true;
            }
        }


        //return base.OnAfterRenderAsync(firstRender);
    }

    private async Task HandledHotelRoomUpsert()

    {
        try
        {
            var roomDetailsByName = await HotelRoomRepository.IsRoomUniq(model.Name, model.Id);
            if (roomDetailsByName != null)
            {
                //Show Error
                // await FailureAlert(); or better is below

                await JsRuntime.ToastrError("Room Name already exists");
                return;
                ;
            }
            if (model.Id != 0 && Title == "Update")
            {
                model.Details = await QuillHtml.GetHTML();
                //Update
                var updateRoomResult = await HotelRoomRepository.UpdateHotelRoom(model.Id, model);
                if (model.ImageUrls != null && model.ImageUrls.Any())
                {

                    if (DeletedImageNames != null && DeletedImageNames.Any())
                    {
                        foreach (var deletedImageName in DeletedImageNames)
                        {
                            var imageName = deletedImageName.Replace($"{NavigationManager.BaseUri}RoomImages/", "");

                            var result = FileUpload.DeleteFile(imageName);
                            await ImagesRepository.DeleteHotelImageByImageUrl(deletedImageName);
                        }
                    }

                    await AddHotelRoomImage(updateRoomResult);
                }
                await JsRuntime.ToastrSuccess("Hotel Room Updated Successfully!");
            }
            else
            {
                //Create
                model.Details = await QuillHtml.GetHTML();
                var createRoom = await HotelRoomRepository.CreateHotelRoom(model);
                //if (createRoom.HotelRoomImages.Any())
                //{
                //    await AddHotelRoomImage(createRoom);
                //}
                await AddHotelRoomImage(createRoom);
                await JsRuntime.ToastrSuccess("Hotel Room Created Successfully!");

            }
        }
        catch (Exception ex)
        {
            //Log Exception
            await JsRuntime.ToastrError($"Unknown Error is Occurred!:{ex.Message}");
        }


        //await SuccessAlert();
        //await JsRuntime.ToastrSuccess("Done!");
        NavigationManager.NavigateTo("hotel-room");

    }

    private async Task AddHotelRoomImage(HotelRoomDTO roomDetails)
    {
        //if (model.ImageUrls.Count> 0 && model.ImageUrls.Any())
        //{
        //if (model.ImageUrls.Any())
        //{
        if (model.ImageUrls == null)
        {
            model.ImageUrls = new List<string>();
        }
        foreach (var imageUrl in model.ImageUrls)
        {
            if (model.HotelRoomImages == null || model.HotelRoomImages.Where(x => x.RoomImageUrl == imageUrl).Count() == 0)
            {

                RoomImage = new HotelRoomImageDTO()
                {
                    RoomId = roomDetails.Id,
                    RoomImageUrl = imageUrl
                };
                await ImagesRepository.CreateHotelRoomImage(RoomImage);
            }
            //}
            //}
        }



    }

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        IsImageUploadProcessStarted = true;
        try
        {
            var images = new List<string>
    ();
            if (e.GetMultipleFiles().Count > 0)
            {
                foreach (var file in e.GetMultipleFiles())
                {
                    FileInfo fileInfo = new FileInfo(file.Name);
                    if (fileInfo.Extension.ToLower() == ".jpg" ||
                    fileInfo.Extension.ToLower() == ".png" ||
                    fileInfo.Extension.ToLower() == ".jpeg")
                    {
                        var uploadedImagePath = await FileUpload.UploadFile(file);
                        images.Add(uploadedImagePath);
                    }
                    else
                    {
                        await JsRuntime.ToastrError("Please just Select .jpg/.jpeg/.png file only");
                        return;
                    }
                }
                if (images.Any())
                {
                    if (model.ImageUrls != null && model.ImageUrls.Any())
                    {
                        model.ImageUrls.AddRange(images);
                    }
                    else
                    {
                        model.ImageUrls = new List<string>();
                        model.ImageUrls.AddRange(images);
                    }
                }
                else
                {
                    await JsRuntime.ToastrError("Image Uploading Failed");
                    return;
                }
            }
            IsImageUploadProcessStarted = false;
        }
        catch (Exception ex)
        {

            await JsRuntime.ToastrError(ex.Message);

        }

    }

    internal async Task DeletePhoto(string imageUrl)
    {
        try
        {
            var imageIndex = model.ImageUrls.FindIndex(x => x == imageUrl);
            var imageName = imageUrl.Replace($"{NavigationManager.BaseUri}RoomImages/", "");
            if (model.Id == 0 && Title == "Create")
            {
                var result = FileUpload.DeleteFile(imageName);
            }
            else
            {
                //update
                DeletedImageNames ??= new List<string>
                    ();
                DeletedImageNames.Add(imageUrl);
            }
            model.ImageUrls.RemoveAt(imageIndex);
        }
        catch (Exception ex)
        {
            await JsRuntime.ToastrError(ex.Message);
        }

    }

    //public void SetHTML()
    //{
    //    if (!string.IsNullOrEmpty(model.Details))
    //    {
    //        this.QuillHtml.LoadHTMLContent(model.Details);
    //    }
    //    StateHasChanged();
    //}



}


